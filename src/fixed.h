#ifndef FIXED_H
#define FIXED_H

#define SHIFT 8
#define SHIFT_MASK ((1 << SKIFT) - 1)

typedef int fixed;
const fixed cosTable[256] = {
    256,  255,  255,  255,  254,  254,  253,  252,  251,  249,  248,  246,  244,  243,  241,  238,  236,  234,  231,
    228,  225,  222,  219,  216,  212,  209,  205,  201,  197,  193,  189,  185,  181,  176,  171,  167,  162,  157,
    152,  147,  142,  136,  131,  126,  120,  115,  109,  103,  97,   92,   86,   80,   74,   68,   62,   56,   49,
    43,   37,   31,   25,   18,   12,   6,    0,    -6,   -12,  -18,  -25,  -31,  -37,  -43,  -49,  -56,  -62,  -68,
    -74,  -80,  -86,  -92,  -97,  -103, -109, -115, -120, -126, -131, -136, -142, -147, -152, -157, -162, -167, -171,
    -176, -181, -185, -189, -193, -197, -201, -205, -209, -212, -216, -219, -222, -225, -228, -231, -234, -236, -238,
    -241, -243, -244, -246, -248, -249, -251, -252, -253, -254, -254, -255, -255, -255, -256, -255, -255, -255, -254,
    -254, -253, -252, -251, -249, -248, -246, -244, -243, -241, -238, -236, -234, -231, -228, -225, -222, -219, -216,
    -212, -209, -205, -201, -197, -193, -189, -185, -181, -176, -171, -167, -162, -157, -152, -147, -142, -136, -131,
    -126, -120, -115, -109, -103, -97,  -92,  -86,  -80,  -74,  -68,  -62,  -56,  -49,  -43,  -37,  -31,  -25,  -18,
    -12,  -6,   0,    6,    12,   18,   25,   31,   37,   43,   49,   56,   62,   68,   74,   80,   86,   92,   97,
    103,  109,  115,  120,  126,  131,  136,  142,  147,  152,  157,  162,  167,  171,  176,  181,  185,  189,  193,
    197,  201,  205,  209,  212,  216,  219,  222,  225,  228,  231,  234,  236,  238,  241,  243,  244,  246,  248,
    249,  251,  252,  253,  254,  254,  255,  255,  255};

// theta is in radians
inline fixed f_cos(uint8_t theta) { return cosTable[theta]; }

inline fixed f_sin(uint8_t theta) { return cosTable[uint8_t(theta - 64)]; }
inline fixed f_tan(uint8_t theta) { return (f_sin(theta) << SHIFT) / f_cos(theta); }

#endif